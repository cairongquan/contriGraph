function t(t,s){return new Date(Date.parse(t+`-${s}-01`)).getDay()}const s=t=>{const s=isNaN(t)?0:Number(t);return 0===s?"#1e1f2a":s<=5?"#c6e48b":s<=10?"#7bc96f":"#2dce49"};class i{constructor(t){this.canvas=null,this.svg=null,this.canvasDom=null,this.width=0,this.height=0;const{canvas:i,svg:a,size:e=10,gapSize:h=5,data:n={},colorParse:r,year:c,radius:g=2}=t;if(i instanceof HTMLCanvasElement)this.isSvgOrCanvas="canvas",this.canvas=i.getContext("2d"),this.canvasDom=i;else{if(!(a instanceof SVGSVGElement))throw new Error("miss required param: canvas or svg");this.isSvgOrCanvas="svg",this.svg=a}this.size=e,this.gapSize=h,this.data=n,this.colorParse="function"==typeof r&&r||s,this.year=c||(new Date).getFullYear(),this.radius=g}render(s){let i=[],a="";if(s&&!isNaN(s)){const e=function(t,s){return 12===s?31:Math.trunc(Math.ceil(Date.parse(t+`-${s+1}`)-Date.parse(t+`-${s}`))/864e5)}(this.year,s),h=t(this.year,s);i=new Array(h).fill(0).concat(new Array(e).fill(1)),a=`${this.year}-${String(s).padStart(2,"0")}-01`}else{const s=t(this.year,1),h=(e=this.year,Math.trunc(Math.ceil(Date.parse(`${e+1}-1-31`)-Date.parse(`${e}-1-31`)))/864e5);i=new Array(s).fill(0).concat(new Array(h).fill(1)),a=`${this.year}-01-01`}var e;"canvas"===this.isSvgOrCanvas?this.getSizeOfCanvas(i.length):this.getSizeOfSvg(i.length);let h="svg"===this.isSvgOrCanvas?"":null;i.forEach(((t,s)=>{const i=Math.floor(s/7),e=s%7;let n="";0!==t?(n=n=this.colorParse(this.data[a]?this.data[a]:0),a=function(t,s){const i=new Date(t);return i.setDate(i.getDate()+s),`${i.getFullYear()}-${String(i.getMonth()+1).padStart(2,"0")}-${String(i.getDate()).padStart(2,"0")}`}(a,1)):n="rgba(255, 0, 255, 0)","canvas"===this.isSvgOrCanvas?this.createCanvas(i,e,n):h+=this.createRect(i,e,n)})),"svg"===this.isSvgOrCanvas&&(this.svg.innerHTML=h)}createCanvas(t,s,i){null!==this.canvas&&(this.canvas.fillStyle=i,this.canvas.fillRect(t*(this.size+this.gapSize),s*(this.size+this.gapSize),this.size,this.size))}createRect(t,s,i){const a=t*this.size+this.gapSize*t,e=s*this.size+this.gapSize*s;return`<rect width="${this.size}" height="${this.size}" x="${a}" y="${e}" rx="${this.radius}" ry="${this.radius}" style="fill:${i}"></rect>`}getSizeOfCanvas(t){if("canvas"===this.isSvgOrCanvas){const s=Math.ceil(t/7),i=7;this.width=s*this.size+(s-1)*this.gapSize,this.height=i*this.size+(i-1)*this.gapSize,this.canvasDom.width=this.width,this.canvasDom.height=this.height}}getSizeOfSvg(t){if("svg"===this.isSvgOrCanvas){const s=Math.ceil(t/7),i=7;this.width=s*this.size+(s-1)*this.gapSize,this.height=i*this.size+(i-1)*this.gapSize,Object.assign(this.svg.style,{width:this.width,height:this.height})}}}export{i as default};
